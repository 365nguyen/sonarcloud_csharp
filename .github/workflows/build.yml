# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    name: Build and analyze
    runs-on: self-hosted
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2
  
      - name: Setup NuGet
        uses: nuget/setup-nuget@v1
        with:
          nuget-version: 'latest'
  
      - name: Restore NuGet packages
        run: nuget restore Solution.sln

      - name: Create Build Directory
        run: mkdir _build

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          #.\.sonar\scanner\dotnet-sonarscanner begin /k:"365nguyen_sonarcloud_csharp" /o:"365nguyen" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          #dotnet build
          # .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

          $currentDirectory = Get-Location
          Write-Host "Current Directory: $currentDirectory"
          
          Get-ChildItem -Path $currentDirectory -Filter OpenCover.Console.exe -Recurse
          Get-ChildItem -Path $currentDirectory -Filter ReportGenerator.exe -Recurse
              
          # SONAR BEGIN
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"365nguyen_sonarcloud_csharp" /o:"365nguyen" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths=coverage.xml
          
          # Build project
          msbuild.exe Solution.sln /nologo /nr:false /p:DeployOnBuild=true /p:DeployDefaultTarget=WebPublish /p:WebPublishMethod=FileSystem /p:DeleteExistingFiles=True /p:platform="Any CPU" /p:configuration="Release" /p:PublishUrl="../_build"
          
          # Define paths to OpenCover and ReportGenerator executables, # Replace {version} with the actual version number or use a script to dynamically find it
          $openCoverPath = ".\packages\OpenCover.4.7.1221\tools\OpenCover.Console.exe"
          $reportGeneratorPath = ".\packages\ReportGenerator.5.2.2\tools\net47\ReportGenerator.exe"
          
          # Run OpenCover
          & $openCoverPath -target:"vstest.console.exe" -targetargs:"ClassLibrary.Tests\bin\Release\ClassLibrary.Tests.dll" -filter:"+[${{ inputs.moduleName }}*]* -[*.Tests]*" -register:user -output:coverage.xml
          
          # Convert coverage report with ReportGenerator
          & $reportGeneratorPath "-reports:coverage.xml" "-targetdir:coveragereport" -reporttypes:Cobertura
          
          # SONAR BEGIN
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"